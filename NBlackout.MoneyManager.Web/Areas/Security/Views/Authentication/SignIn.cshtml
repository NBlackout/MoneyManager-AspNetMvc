@model AuthenticationViewModel
@{
    Layout = "~/Areas/Security/Views/Shared/_Layout.cshtml";
}
<div id="authenticationContent">
    <h3 id="authenticationTitle">@Resource.Labels_Connection</h3>
    @using (Html.BeginForm("SignIn", "Authentication", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ReturnUrl)

        <div class="form-group @((!ViewData.ModelState.IsValidField("UserName")) ? "has-error" : "")">
            @Html.LabelFor(m => m.UserName, new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><span class="glyphicon glyphicon-user"></span></span>
                @Html.TextBoxFor(m => m.UserName, new { placeholder = Html.DisplayNameFor(m => m.UserName), @class = "form-control", @autofocus = "autofocus" })
            </div>
            @Html.ValidationMessageFor(m => m.UserName, null, new { @class = "help-block" })
        </div>
        <div class="form-group @((!ViewData.ModelState.IsValidField("Password")) ? "has-error" : "")">
            @Html.LabelFor(m => m.Password, new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><span class="glyphicon glyphicon-lock"></span></span>
                @Html.PasswordFor(m => m.Password, new { placeholder = Html.DisplayNameFor(m => m.Password), @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(m => m.Password, null, new { @class = "help-block" })
        </div>
        <div class="form-group @((!ViewData.ModelState.IsValidField("Login")) ? "has-error" : "")">
            @Html.ValidationMessage("Login", null, new { @class = "help-block" })
        </div>
        <div style="margin-top: 20px;">
            <button class="btn btn-block btn-primary">@Resource.Actions_SignIn</button>
        </div>
    }
</div>
